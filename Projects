Below are some of my highlighted projects. Each project folder contains its own README with detailed information, including setup instructions, technologies used, and outcomes.





[Project Name 1]





Description: A02 A Comparative Analysis of Machine Learning and Deep Learning Tools and Frameworks



 Research:
Choose 2 (1 set of suggestion) framework/ Libraries/ Repositories, concentrating on the following areas:
Background: Origin, development, and purpose.
Key Features: Distinguishing features and advantages over others.
Real-world Applications: Case studies or success stories demonstrating its effectiveness.
Comparative Perspective: Compare your tool/framework with others in terms of usability, performance, support, and scalability.
Source information from reliable platforms such as official documentation, scholarly articles, reputable tech blogs, and user reviews.
Collect notes, visuals, code snippets, or other pertinent content for your presentation.
Presentation Drafting
Assemble your research and materials into a structured and compelling presentation.
Organize your presentation to include an introduction, detailed findings, optional demonstration, and a conclusion with comparative insights.
Practice your presentation within your group to ensure coherence, proper timing, and smooth transitions.
Final Presentation and Interactive Session
Present your insights to the class, adhering to the allotted time
Emphasize the distinctiveness of your tool/framework and present your comparative analysis succinctly.
Conduct the practical demonstration (if applicable).
Be ready to engage with the audience and respond to questions during the subsequent discussion.
Report and Material Submission
Submit a 200 300-word report/document detailing your research and findings on the assigned tool/framework. Along with your presentation slides
Include presentation slides, materials for the demonstration (like a code repository or Jupyter notebook), and any additional documents.
Topic suggestions ( you are not limited to these) 
TensorFlow vs PyTorch

Scikit-learn vs H2O

AutoGluon vs H2O.ai
NKLT (NLP Toolkit) vs spaCy
Keras vs FastAI

JAX vs NumPy

GitHub Copilot vs TabNine

Hugging Face Transformers vs OpenAI GPT-4 API
PyTorch Lightning vs FastAI
Assessment Criteria:

Research Quality: Depth and accuracy of the research conducted.
Analytical Insight: Clarity and depth in the comparative analysis presented.
Presentation Skill: Effectiveness in communication, organization, and delivery during the presentation.
Interaction: Ability to involve the audience and address queries during the discussion period.
Documentation: The thoroughness and quality of the final report and supplementary materials.
Additional Guidance:

Foster teamwork and utilize a variety of sources for a comprehensive and balanced analysis.
Be inventive in your presentation and demonstration to ensure an engaging and informative session.
Stick to the timeline to ensure a structured and systematic completion of the assignment.


[Project Name 2]





Description: A03 Neural Network Zoo
AI Assignments



1. Introduction to Neural Networks:
Start with a brief introduction to the concept of neural networks and deep learning.
Explain the basic structure of a neuron and how neurons are organized in layers to form a network.
2. The Zoo Concept:
Introduce the "Neural Network Zoo" concept, where each type of neural network is represented as an "animal" in the zoo.
Create a visual chart or a set of cards with different neural network "animals" like Convolutional Neural Network (CNN) Cheetah, Recurrent Neural Network (RNN) Raccoon, Long Short-Term Memory (LSTM) Lemur, etc.
3. Interactive Group Activity:
Each group will choose  a "neural network animal". ( mean an  animal ) 
Each group's task is to research one different type of  network, understand its structure, how it works, and its typical applications.
Encourage creativity: each group should come up with a creative presentation of their neural network, possibly creating a poster or a digital illustration representing their animal and its characteristics.
4. Presentation and Zoo Tour:
Each group can record or simple upload the presentation of  their neural network animal  and submit.
  A discussion forum will be open  to encourage questions and discussions about how each network functions and its applications.
After all presentations, create a gallery or a "zoo tour" where all the neural network animals are showcased. This can will be posted on canvas  
5. Reflection and Deeper Understanding:
Conclude the activity with a reflective session, discussing the similarities and differences between the networks, and how each is suited for different tasks.



[Project Name 3]





Description: A04 ITAI 2376 Deep Learning for an 11 year old



Objective: Create an engaging and informative presentation on a fundamental concept of Deep Learning, tailored for easy understanding by an 11-year-old audience. Your presentation should be a blend of creativity and in-depth research, showcasing your grasp of the subject matter. Feel free to use any format that suits your style - whether it's drawing, writing a song, or any other innovative method of presentation.

Topic Selection: Choose one topic from the following list for your presentation:

Backpropagation
Gradient Descent
Weights, Bias, and Activation Functions
Tensors
Entropy and Cross Entropy
Presentation Guidelines:

Be Creative: Think outside the box and come up with a unique way to explain your chosen topic. The goal is to make the concept understandable and relatable to an 11-year-old.
Research Thoroughly: Ensure that your presentation is grounded in accurate information and displays a deep understanding of the chosen topic.
Professional Format: Deliver your work in a polished and professional manner. Make sure to cite all the sources you refer to in your research.
Naming Your Work: Title your assignment as "A04_[YourTeamName]_[YourName]_ITAI2376." Replace the bracketed sections with your respective team name and your name.


[Project Name 4]


Description: A05 Analyzing "Arrival" Through the Lens of NLP

Objective: To explore the complexities of human and extraterrestrial communication as presented in the movie "Arrival" (2016), and to relate these complexities to real-world challenges in Natural Language Processing (NLP).

Instructions:

Watch the Movie: Each group member must watch "Arrival," focusing on the themes of language, communication, and understanding.
Identify NLP Challenges: Discuss as a group and identify specific scenes or elements in the movie that parallel the challenges in NLP, such as ambiguity, idiomatic expressions, sarcasm, and regional/cultural variations. Use the content from the presentation on the challenges of textual data and domains of NLP as a guide.
Analyze the Communication Methods: Analyze the methods used by the protagonists to understand and communicate with the extraterrestrial visitors. Relate these methods to approaches in NLP like rule-based NLP, statistical NLP, and deep NLP. Discuss any tools or technologies that could be analogous to the techniques used in the movie.
Prepare a Presentation: Create a presentation that summarizes your findings, including:
A brief overview of the movie's plot relevant to the language and communication theme.
Specific challenges in NLP identified in the movie and their parallels to real-world NLP challenges.
Analysis of the communication methods with the extraterrestrials in the context of NLP approaches and tools.
Your reflections on how the movie's portrayal of language and communication expands or challenges current understanding and approaches in NLP.
Deliverables:

A PowerPoint presentation  (You can submit a recording )
A written report (3-5 pages) detailing your analysis and reflections.
Name the submission file as A05_TeamName_ SubmitterName_ ITAI 2376 , replacing the italic words with the appropriate names.

Rubric

Deliverables: Written Report or PowerPoint Presentation (excluding live presentation), addressing all the items below.

Written Content and Analysis (60 points)
NLP Challenges Analysis (20 points): Depth and clarity in identifying and analyzing NLP challenges depicted in the movie, with parallels to real-world NLP.
Communication Methods Evaluation (20 points): Comprehensive evaluation of communication methods with extraterrestrials, linked to NLP approaches.
Insightful Reflections (10 points): Critical reflections on language portrayal in "Arrival" and its implications for NLP.
Clarity and Organization (10 points): Logical arrangement, clarity of expression, and coherence in presenting ideas.
Research and References (20 points)
Quality of References (10 points): Utilization of accurate, relevant sources to support analysis; diversity of references is a plus.
Citation Accuracy (10 points): Correct and consistent citation style; includes a comprehensive reference list.
Creativity and Originality (10 points)
Creative Parallel Drawing (5 points): Originality in linking movie concepts with NLP challenges.
Innovative Perspectives (5 points): Presentation of innovative ideas or solutions related to NLP challenges illustrated in the movie.
Team Collaboration (10 points)
Effective Collaboration (5 points): Demonstrates teamwork, equal contribution, and collaborative analysis.
Dedication to Assignment (5 points): Reflects significant effort, thorough research, and dedication to the task.

[Project Name 5]


Description: AI Agent Creation
Capstone Project

Objective 
This capstone project requires student groups to design, implement, and demonstrate an AI agent system that applies key concepts covered throughout the course. The project will provide hands-on experience building and evaluating AI agent systems that incorporate reinforcement learning techniques with language-based planning and decision-making.

All deliverables must follow the naming convention: FN_TypeOfDeliverable_NameOfStudentSubmittingForTheGroup_Group_ITAI2376.FileExtension

All deliverables must include a title page or opening paragraph with the group name and the full names of all participants. Important note: If a student's name is missing from a deliverable, it will be considered that the student did not participate and will receive a grade of 0.

Important Dates
Project Proposal Due: June 27, 2025
Final Submission Due: August 6, 2025
Project Options
Choose one of the following project types that best match your group's interests:

Option 1: Research Assistant Agent
Create an agent that helps users research topics, gather information, and present findings in an organized format.

Key Features:

Information retrieval and summarization from multiple sources
Evaluation of source credibility and relevance
Organization of findings into structured reports
Citation management and reference tracking
Example Implementation: A virtual research assistant that helps students gather sources for academic papers, summarize key points, identify connections between sources, and format citations properly.

Option 2: Process Automation Agent
Build an agent that automates complex multi-step processes by planning, executing, and adapting to changing conditions.

Key Features:

Task decomposition and prioritization
Sequential action execution with error handling
Progress monitoring and status reporting
Adaptation when steps fail or conditions change
Example Implementation: An administrative assistant that helps schedule meetings, prepares documentation, sends reminders, and handles follow-ups for departmental processes.

Option 3: Multi-Agent Collaborative System
Develop a team of specialized agents that collaborate to solve problems more effectively than a single agent could.

Key Features:

Specialized agent roles (researcher, critic, editor, etc.)
Communication protocols between agents
Task distribution and coordination
Consensus building or leader-based decision making
Example Implementation: A document creation system where different agents contribute research, writing, editing, and fact-checking to produce high-quality content.

Option 4: Interactive Learning Companion
Design an agent that adapts to individual learning needs, provides personalized instruction, and gives constructive feedback.

Key Features:

Learner profile building and adaptation
Personalized content generation
Progress assessment and feedback
Learning path adjustment based on performance
Example Implementation: A programming tutor that helps students learn Python by generating appropriate exercises, providing hints, evaluating solutions, and adapting difficulty based on performance.

Technical Requirements
Your project must include all of the following components:

1. Agent Architecture
Your agent system must implement a coherent architecture that includes:

Input Processing: How the agent interprets user requests or environmental data
Memory System: How the agent stores and retrieves information
Reasoning Component: How the agent makes decisions and plans actions
Output Generation: How the agent communicates results or takes actions
Implement at least one established agent pattern such as:

ReAct (Reasoning and Acting)
Chain-of-Thought reasoning
Reflection-based improvement
Planning-then-execution
2. Tool Integration
Your agent must effectively use at least two external tools, such as:

Web search capabilities
Document processing
Calculation tools
API interactions
Code execution environments
Vector databases for knowledge retrieval
For each tool:

Document how the agent determines when to use the tool
Implement error handling for when tools fail
Show how the agent interprets and uses tool outputs
3. Reinforcement Learning Elements
Incorporate at least one reinforcement learning concept into your agent system:

Feedback Mechanism: How user or environment feedback improves agent behavior
Reward System: How the agent evaluates the success of its actions
Policy Improvement: How the agent's decision-making improves over time
This doesn't necessarily require implementing traditional RL algorithms, but should demonstrate how the agent learns from experience.

4. Safety and Security Measures
Include explicit safety measures in your agent:

Input Validation: Screening for inappropriate or harmful requests
Boundary Enforcement: Clearly defined limitations on what the agent will/won't do
Fallback Strategies: How the agent responds when it can't fulfill a request
Transparency: How the agent communicates its limitations and reasoning
Development Environment
You have two primary options for developing and deploying your project:

Option 1: Azure AI Studio (Recommended)
Azure AI Studio provides a comprehensive environment for developing AI applications with your $100 student credit.

Setup Instructions:

Create an Azure account using your student email
Set up Azure AI Studio using the Azure AI Studio documentation
Configure budget alerts at $25, $50, and $75 to monitor usage
Benefits:

Access to powerful compute resources
Support for state-of-the-art models
Integrated development and deployment
Professional-grade infrastructure
Resource Management Tips:

Use the smallest model that meets your needs (e.g., GPT-3.5-Turbo instead of GPT-4)
Implement caching to reduce redundant API calls
Test with minimal parameters before scaling up
Schedule automatic shutdowns for resources when not in use
Option 2: Google Colab
Google Colab provides a free alternative that's sufficient for many project requirements.

Setup Instructions:

Sign in to Google Colab with your Google account
Create a new notebook for your project
Install necessary libraries using pip commands
Benefits:

No cost for basic usage
Familiar Jupyter notebook environment
Easy access to GPU resources (with limitations)
Simple sharing and collaboration
Resource Management Tips:

Save your work frequently as Colab sessions expire
Use the pip install commands in your notebook to manage dependencies
Implement checkpointing to save progress
Consider Colab Pro if you need more consistent resources
Project Deliverables
1. Project Proposal (Due: April 7)
Filename format: FN_Proposal_NameOfStudent_Group_ITAI2376.pdf

A 3-4 page document containing:

Title Page: Group name and full names of all participants
Problem Statement: What problem will your agent solve?
Project Option: Which of the four project options you've chosen
Agent Design: What architecture and components will you use?
Tool Selection: Which external tools will your agent leverage?
Development Plan: What are your milestones and timeline?
Evaluation Strategy: How will you measure success?
Resource Requirements: What computational resources will you need?
Risk Assessment: What challenges do you anticipate and how will you address them?
2. Final Submission (Due: May 5)
A. Source Code Repository
Filename format: FN_Code_NameOfStudent_Group_ITAI2376.zip (or link to repository)

Complete, well-organized codebase (GitHub link is acceptable)
README with setup instructions and group member names
Requirements file listing all dependencies
Well-commented code with clear documentation
Configuration files (with sensitive information removed)
B. Project Report
Filename format: FN_Report_NameOfStudent_Group_ITAI2376.pdf

A 5-7 page document containing:

Title Page: Group name and full names of all participants
Project Overview: Description of the agent and its purpose
System Architecture: Description of key components and their interactions
Implementation Details: Key technical decisions and approaches
Evaluation Results: How you tested the agent and what results you found
Challenges and Solutions: Problems encountered and how you solved them
Lessons Learned: Insights gained during the project
Future Improvements: How the agent could be enhanced with more time
C. Demonstration Video
Filename format: FN_Demo_NameOfStudent_Group_ITAI2376.mp4

A 3-5 minute video that:

Shows your agent in action with real examples
Explains the key features and capabilities
Demonstrates how it handles various situations
Includes names of all group members in opening credits
Implementation Guide
To help you succeed in this project, here's a recommended development approach:

Planning Phase (March 24 - April 7)
Form your team and select your project option
Research existing approaches and technologies
Design your agent architecture
Select tools and technologies
Create a detailed development plan
Submit your project proposal
Implementation Phase (April 8 - April 28)
Set up your development environment
Implement the basic agent architecture
Integrate initial tools
Develop a simple prototype
Test basic functionality
Refine based on testing results
Finalization Phase (April 29 - May 5)
Complete all features and functionality
Conduct comprehensive testing
Create documentation and report
Prepare demonstration video
Package code and materials
Submit final deliverables
Common Challenges and Recommendations
1. Model Limitations
Break complex tasks into smaller steps
Use specialized tools for complex calculations
Implement verification steps to catch errors
2. Tool Integration Issues
Implement robust error handling for all tool calls
Create mock tools for testing purposes
Include fallback strategies when tools are unavailable
3. Resource Constraints
Optimize prompts to reduce token usage
Test with small samples before scaling up
Monitor Azure credit usage carefully
4. Project Scope
Start with a minimal viable product
Add advanced features only after core functionality works
Be realistic about what can be accomplished in the time available
Grading Criteria
Your project will be evaluated based on:

1. Technical Implementation (40%)
Correct implementation of agent architecture
Effective tool integration
Appropriate application of course concepts
Code quality and organization
Error handling and robustness
2. Innovation and Problem Solving (20%)
Creativity in approach
Complexity of problem addressed
Effectiveness in handling challenges
Integration of multiple course concepts
3. Performance and Functionality (20%)
Achievement of stated objectives
Quality of agent outputs and decisions
Reliability and consistency
Safety and security implementation
4. Documentation and Presentation (20%)
Clarity and completeness of documentation
Quality of code comments and organization
Effectiveness of demonstration video
Thoughtfulness of analysis and reflection
Resources and Support
Essential Resources
Azure AI Studio Documentation
LangChain Documentation
Google Colab Resources
Course Materials from Modules 10-14
Getting Help
Throughout your project, you'll have access to:

Office hours for technical questions
Discussion forums for peer collaboration
Sample code repositories
Final Notes
Start Early: Agent development involves many moving parts and unexpected challenges.
Iterate Frequently: Build a minimal version first, then incrementally add features.
Document As You Go: Update documentation throughout development.
Test Thoroughly: Create test cases that cover a wide range of scenarios.
Balance Ambition with Practicality: It's better to have a fully functioning simple agent than a partially complete complex one.
Remember that the journey is as important as the destination. Document your process, including challenges overcome, as these demonstrate your learning and problem-solving abilities.

This project presents an opportunity to apply everything you've learned about AI agents in a practical, hands-on context. Good luck, and enjoy bringing your AI agent to life!


For more details, explore the projects directory.
